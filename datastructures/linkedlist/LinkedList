package datastructures.linkedlist;

/**
 * Created by RenatKaitmazov on 06/05/15.
 */

public class LinkedList<T extends Comparable> {
    private static final String EMPTY_LIST = "The list is empty";

    private Link<T> head = null;
    private Link<T> tail = null;
    private int count = 0;

                /* HELPER METHODS */

    void connect(Link<T> newLink, Link<T> current) {
        newLink.setNext(current.getNext());
        newLink.setPrevious(current);
        newLink.getNext().setPrevious(newLink);
        current.setNext(newLink);
    }

    void disconnect(Link<T> link) {
        link.getPrevious().setNext(link.getNext());
        link.getNext().setPrevious(link.getPrevious());
    }

    void incrementCount() { count++; }

    void decrementCount() { count--; }
                /* HELPER METHODS */

    public boolean isEmpty() { return head == null; }

    public int size() { return count; }

    public void display() {
        if (!isEmpty()) {
            Link<T> current = head;
            while (current != null) {
                System.out.format("%s ", current);
                current = current.getNext();
            }
            System.out.println();
        } else
            System.out.println(EMPTY_LIST);
    }

    public void displayBackward() {
        if (!isEmpty()) {
            Link<T> current = tail;
            while (current != null) {
                System.out.format("%s ", current);
                current = current.getPrevious();
            }
            System.out.println();
        } else
            System.out.println(EMPTY_LIST);
    }

                /* INSERTION */
    public void insert(T element) {
        Link<T> newLink = new Link<>(element);
        if (isEmpty())
            tail = newLink;
        else {
            newLink.setNext(head);
            head.setPrevious(newLink);
        }
        head = newLink;
        count++;
    }

    public void append(T element) {
        Link<T> newLink = new Link<>(element);
        if (isEmpty())
            head = newLink;
        else {
            tail.setNext(newLink);
            newLink.setPrevious(tail);
        }
        tail = newLink;
        count++;
    }

    public void insertAtIndex(int index, T element) {
        if (index < 0 || index > count) {
            System.out.println("Wrong index");
            return;
        }

        if (index == 0) insert(element);
        else if (index == count) append(element);
        else {
            Link<T> current;
            Link<T> newLink = new Link<>(element);
            if (index >= count / 2) {
                current = tail;
                for (int i = count - 1; i >= index; i--)
                    current = current.getPrevious();
                connect(newLink, current);
            } else {
                current = head;
                for (int i = 0; i < index - 1; i++)
                    current = current.getNext();
                connect(newLink, current);
            }
            count++;
        }
    }
                 /* INSERTION */

                /* GETTING ELEMENTS */
    Link<T> getHead() { return head; }

    Link<T> getTail() { return tail; }

    public Link<T> getAtIndex(int index) {
        if (index < 0 || index >= count) return null;

        if (index == 0) return getHead();
        else if (index == count - 1) return getTail();
        else {
            Link<T> current;
            if (index >= count / 2) {
                current = tail;
                for (int i = count - 1; i > index; i--)
                    current = current.getPrevious();
                return current;
            } else {
                current = head;
                for (int i = 0; i < index; i++)
                    current = current.getNext();
                return current;
            }
        }
    }
                /* GETTING ELEMENTS */

                 /* DELETION */
    public Link<T> delete() {
        if (!isEmpty()) {
            Link<T> temp = head;
            if (head.getNext() == null)
                tail = null;
            else
                head.getNext().setPrevious(null);
            head = head.getNext();
            count--;
            return temp;
        } else
            return null;
    }

    public Link<T> deleteLast() {
        if (!isEmpty()) {
            Link<T> temp = tail;
            if (head.getNext() == null)
                head = null;
            else
                tail.getPrevious().setNext(null);
            tail = tail.getPrevious();
            count--;
            return temp;
        } else
            return null;
    }

    public Link<T> deleteAtIndex(int index) {
        if (index < 0 || index >= count) return null;

        if (index == 0) return delete();
        else if (index == count - 1) return deleteLast();
        else {
            Link<T> current = head;
            Link<T> temp;
            
            if (index >= count / 2) {
                current = tail;
                for (int i = count - 1; i > index; i--)
                    current = current.getPrevious();
                temp = current;
            } else {
                for (int i = 0; i < index; i++)
                    current = current.getNext();
                temp = current;
            }
            
            disconnect(current);
            count--;
            return temp;
        }
    }

    public void deleteAll() {
        head = null;
        tail = null;
        count = 0;
    }
                /* DELETION */

                /* ITERATOR */
    public Iterator<T> getIterator() { return new Iterator<>(this); }
}
