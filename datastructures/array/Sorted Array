package datastructures.array;

/**
 * Created by RenatKaitmazov on 02/05/15.
 */
public class SortedArray<T extends Comparable> {
    private T[] data;
    private int count;

    public SortedArray(Class<T> className, int size) {
        data = (T[]) java.lang.reflect.Array.newInstance(className, size);
        count = 0;
    }

    public boolean isEmpty() { return count == 0; }
    public boolean isFull() { return count == data.length; }
    public int size() { return count; }
    public int freeCells() { return data.length - count; }

    public T find(T element) {
        if (!isEmpty()) {
            int left = 0, right = count - 1;

            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (element.compareTo(data[mid]) == 0)
                    return data[mid];
                else if (element.compareTo(data[mid]) < 0)
                    right = mid - 1;
                else
                    left = mid + 1;
            }
            return null;
        } else
            return null;
    }

    public boolean hasElement(T element) { return find(element) != null; }

    public void insert(T element) {
        if (!isFull()) {
            int i;
            if (isEmpty())
                data[count++] = element;
            else {
                for (i = count - 1; i >= 0; i--) {
                    if (element.compareTo(data[i]) > 0) break;
                    data[i + 1] = data[i];
                }
                data[i + 1] = element;
                count++;
            }
        } else
            System.out.println("The array is full");
    }

    public T remove(T element) {
        if (!isEmpty()) {
            int i;
            for (i = 0; i < count; i++)
                if (element.compareTo(data[i]) == 0) break;

            if (i == count) return null;

            T temp = data[i];

            for (int j = i + 1; j < count; j++)
                data[j - 1] = data[j];
            count--;
            return temp;
        } else
            return null;
    }

    public T removeFirst() {
        if (!isEmpty()) {
            T temp = data[0];

            for (int i = 1; i < count; i++)
                data[i - 1] = data[i];
            count--;
            return temp;
        } else
            return null;
    }

    public T removeLast() {
        if (!isEmpty())
            return data[--count];
        else
            return null;
    }

    public void display() {
        for (int i = 0; i < count; i++)
            System.out.format("%s ", data[i]);
        System.out.println();
    }
}
