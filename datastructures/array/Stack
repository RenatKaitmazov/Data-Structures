package datastructures.array;

/**
 * Created by RenatKaitmazov on 03/05/15.
 */
public class Stack<T> {
    private T[] stack;
    private int topIndex;

    public Stack(Class<T> className, int size) {
        stack = (T[]) java.lang.reflect.Array.newInstance(className, size);
        topIndex = 0;
    }

    public boolean isEmpty() { return topIndex == 0; }
    public boolean isFull() { return topIndex == stack.length; }
    public int elementCount() { return topIndex; }
    public int size() { return stack.length; }

    public void push(T element) {
        if (!isFull()) {
            stack[topIndex++] = element;
        } else
            System.out.println("The stack is full");
    }

    public T pop() {
        if (!isEmpty()) {
            return stack[--topIndex];
        } else
            return null;
    }

    public T peek() {
        if (!isEmpty())
            return stack[topIndex - 1];
        else
            return null;
    }

    public void display() {
        if (!isEmpty()) {
            for (int i = topIndex - 1; i >= 0; i--)
                System.out.format("%s ", stack[i]);
            System.out.println();
        } else
            System.out.println("The stack is empty");
    }
}
