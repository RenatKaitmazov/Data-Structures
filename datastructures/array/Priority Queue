package datastructures.array;

/**
 * Created by RenatKaitmazov on 04/05/15.
 */
public class PriorityQueue<T extends Comparable> {
    private int count;
    private T[] priorityQueue;

    public PriorityQueue(Class<T> className, int size) {
        priorityQueue = (T[]) java.lang.reflect.Array.newInstance(className, size);
        count = 0;
    }

    public boolean isEmpty() { return count == 0; }
    public boolean isFull() { return count == priorityQueue.length; }
    public int elementsCount() { return count; }
    public int size() { return priorityQueue.length; }

    public T peek() {
        if (!isEmpty()) return priorityQueue[--count];
        else return null;
    }

    public void insert(T element) {
        if (!isFull()) {
            int j;

            if (isEmpty())
                priorityQueue[count++] = element;
            else {
                for (j = count - 1; j >= 0; j--) {
                    if (element.compareTo(priorityQueue[j]) > 0)
                        break;
                    priorityQueue[j + 1] = priorityQueue[j];
                }

                priorityQueue[j + 1] = element;
                count++;
            }
        }
    }

    public T remove() {
        if (!isEmpty()) return priorityQueue[--count];
        else return null;
    }

    public void display() {
        if (!isEmpty()) {
            for (int i = 0; i < count; i++)
                System.out.format("%d ", priorityQueue[i]);
            System.out.println();
        }
    }
}
