package datastructures.tree;

/**
 * Created by RenatKaitmazov on 14/05/15.
 */

public class Node<T extends Comparable> {
    private T data;
    private Node<T> leftChild;
    private Node<T> rightChild;
    private Node<T> parent;

    public Node(T data) { this.data = data; }

    public void setData(T data) { this.data = data; }
    public T getData() { return data; }

    public void setParent(Node<T> parent) { this.parent = parent; }
    public Node<T> getParent() { return parent; }

    public void setLeftChild(Node<T> leftChild) { this.leftChild = leftChild; }
    public Node<T> getLeftChild() { return leftChild; }

    public void setRightChild(Node<T> rightChild) { this.rightChild = rightChild; }
    public Node<T> getRightChild() { return rightChild; }

    public boolean isLeafNode() { return !hasLeftChild() && !hasRightChild(); }
    public boolean hasLeftChild() { return leftChild != null; }
    public boolean hasRightChild() { return rightChild != null; }
    public boolean isLeftChild(Node<T> node) { return node.getParent().getLeftChild() == node; }
    public boolean isRightChild(Node<T> node) { return node.getParent().getRightChild() == node; }

    @Override
    public String toString() { return String.format("%s", data); }
}
