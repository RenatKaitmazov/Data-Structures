package datastr.set;

/**
 * Created by Renat Kaitmazov on 19/08/15.
 */

import datastr.linkedlist.LinkedList;
import datastr.linkedlist.ListIterator;

/**
 *
 * SC in the name of the class stands for Separate Chaining
 */

public final class SCSet<T> {
    public static final int INITIAL_CAPACITY = 32;

    private LinkedList<T>[] storage;
    private int count = 0;

    public SCSet() {
        storage = (LinkedList<T>[]) new LinkedList[INITIAL_CAPACITY];
        for (int i = 0; i < INITIAL_CAPACITY; i++)
            storage[i] = new LinkedList<>();
    }

    public SCSet(int initialCapacity) {
        storage = (LinkedList<T>[])new LinkedList[initialCapacity];
        for (int i = 0; i < initialCapacity; i++)
            storage[i] = new LinkedList<>();

    }

    @Override
    public String toString() {
        if (isEmpty())
            return "{}";
        else {
            StringBuilder builder = new StringBuilder("{");

            for (int i = 0; i < storage.length; i++) {
                LinkedList<T> list = storage[i];

                if (list != null && !list.isEmpty()) {
                    ListIterator<T> iterator = list.getIterator();

                    do {
                        builder.append(iterator.get()).append(", ");
                        iterator.next();
                    } while (!iterator.atEnd());

                }
            }

            int start = builder.length() - 2;
            int end = builder.length();
            builder.replace(start, end, "}");

            return builder.toString();
        }
    }

    public boolean isEmpty() { return count == 0; }
    public int size() { return count; }

    private int abs(int value) { return value < 0 ? -value: value; }

    public void insert(T element) {
        int index = abs(element.hashCode()) % storage.length;
        T item = null;
        if (!storage[index].isEmpty()) item = storage[index].find(element);
        if (item != null && item.equals(element)) return;
        storage[index].append(element);
        ++count;
    }

    public T find(T element) {
        if (isEmpty()) return null;

        int index = abs(element.hashCode()) % storage.length;
        return storage[index].find(element);
    }

    public T delete(T element) {
        if (isEmpty()) return null;

        int index = abs(element.hashCode()) % storage.length;
        --count;
        return storage[index].delete(element);
    }
}
